// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux(in=load, sel=address[14], a=aLoad, b=bLoad);

    RAM16K(in=in, load=aLoad, address=address[0..13], out=ramOut);
    
    Screen(in=in, load=bLoad, address=address[0..12], out=screenOut);
    
    Keyboard(out=keyboardOut);

    // firstCondition && secondCondition -> keyboard
    And(a=firstCondition, b=secondCondition, out=isKeyboard);
    
    // firstCondition: address[14] == true && address[13] == true
    And(a=address[14], b=address[13], out=firstCondition);
    
    // secondCondition: address[0..12] == false
    Or(a=address[0], b=address[1], out=orFirst);
    Or(a=orFirst, b=address[2], out=orSecond);
    Or(a=orSecond, b=address[3], out=orThird);
    Or(a=orThird, b=address[4], out=orFourth);
    Or(a=orFourth, b=address[5], out=orFifth);
    Or(a=orFifth, b=address[6], out=orSixth);
    Or(a=orSixth, b=address[7], out=orSeventh);
    Or(a=orSeventh, b=address[8], out=orEighth);
    Or(a=orEighth, b=address[9], out=orNineth);
    Or(a=orNineth, b=address[10], out=orTenth);
    Or(a=orTenth, b=address[11], out=orEleventh);
    Or(a=orEleventh, b=address[12], out=orLast);
    Not(in=orLast, out=secondCondition);

    Mux16(a=screenOut, b=keyboardOut, sel=isKeyboard, out=ioOut);

    Mux16(a=ramOut, b=ioOut, sel=address[14], out=out);
}
