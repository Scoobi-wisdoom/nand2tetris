// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean black;
    static Array screen, twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let black = true;
        let screen = 16384;
        let twoToThe = Array.new(16);
        let i = 0;
        let twoToThe[0] = 1;
        while (i < 15) {
            let twoToThe[i + 1] = twoToThe[i] + twoToThe[i];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while(i < 8192) {
            do Memory.poke(screen[i], 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let black = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int mask;

        let address = (y*32) + (x/16);
        let mask = twoToThe[x & 15];

        if( black ) {
            let screen[address] = screen[address] | mask;
        }
        else {
            let screen[address] = screen[address] & ~mask;
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    // https://github.com/chichunchen/nand2tetris/blob/master/12/Screen.jack
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, diff;
        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        if (dy = 0) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            return;
        }
        if (dx = 0) {
            do Screen.drawVerticalLine(y1, y2, x1);
            return;
        }
        // general line
        if ((y2 > y1) & (x2 > x1)) {
            while((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if ((x2 < x1) & (y2 > y1)) {
            let dx = Math.abs(dx);
            while((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 - a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if ((x2 > x1) & (y2 < y1)) {
            let dy = Math.abs(dy);
            while((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }
        if ((y2 < y1) & (x2 < x1)) {
            let dx = Math.abs(dx);
            let dy = Math.abs(dy);
            while((a < (dx + 1)) & (b < (dy + 1))) {
                do Screen.drawPixel(x1 - a, y1 - b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
            return;
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        var int temp;
        var int mask;
        var int addressInBetween;
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        
        let addressInBetween = (y * 32) + (x1 / 16) + 1;
        while (addressInBetween  < ((y * 32) + (x2 / 16))) {
            let screen[addressInBetween] = black;
            let addressInBetween = addressInBetween + 1;
        }

        if ((x1 / 16) < (x2 / 16)) {
            /** To modify the first memory word, fill from i to the end in the memory word, where i denotes location of x1 in the memory word. **/  
            let mask = -twoToThe[x1 & 15]; // The sum of geometric series: 2^i + ... + 2^14 added to a value of a number 16th binary is 1.
            if (black) {
                let screen[(y * 32) + (x1 / 16)] = screen[(y * 32) + (x1 / 16)] & ~mask | mask;
            } else {
                let screen[(y * 32) + (x1 / 16)] = screen[(y * 32) + (x1 / 16)] & ~mask;
            }

            /** To modify the last memory word, fill from beginning to i in the memory word, where i denotes location of x2 in the memory word. **/  
            if ((x2 & 15) = 0) {
                let mask = 1;
            } else {
                let mask = twoToThe[x2 & 15] - 1; // The sum of geometric series: 2^0 + ... + 2^(i-1)
            }
            if (black) {
                let screen[(y * 32) + (x2 / 16)] = screen[(y * 32) + (x2 / 16)] & ~mask | mask;
            } else {
                let screen[(y * 32) + (x2 / 16)] = screen[(y * 32) + (x2 / 16)] & ~mask;
            }
        } else {
            while (~((x1 & 15) > (x2 & 15))) {
                do Screen.drawPixel(x1, y);
                let x1 = x1 + 1;
            }
        }
        
        return;
    }

    function void drawVerticalLine(int y1, int y2, int x) {
        var int large, small;
        var int i;
        let i = 0;
        if (y1 < y2) {
            let small = y1;
            let large = y2;
        } else {
            let small = y2;
            let large = y1;
        }
        while(small < large) {
            do Screen.drawPixel(x, small);
            let small = small + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx;
        var int dy;
        let dx = x2 - x1;
        let dy = y2 - y1;
        while((y1 < y2) | (y1 = y2)) {
            do Screen.drawHorizontalLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int top, bottom;
        var int dy;
        if (r > 181) {
            return;
        }
        let top = y - r;
        let bottom = y + r;
        let dy = r;
        while(top < bottom) {
            do Screen.drawHorizontalLine(x - Math.sqrt((r*r)-(dy*dy)),
                               x + Math.sqrt((r*r)-(dy*dy)), y + dy);
            let top = top + 1;
            let dy = dy - 1;
        }
        return;
    }
}
