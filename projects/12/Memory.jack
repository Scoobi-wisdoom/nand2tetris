// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory, freeList;
    static int heapSize;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heapSize = 14336;
        let freeList = 2048;
        let freeList[0] = heapSize;
        // next
        let freeList[1] = -1;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    // https://github.com/itayabu/nand2tetris/blob/master/ex12/Memory.jack
    function int alloc(int size) {
        var int previousBlock, currentBlock, nextAddress, allocAddress;

        let previousBlock = freeList;
        let currentBlock = freeList;
        let nextAddress = freeList + 1;
        let allocAddress = -1;

        while (~(memory[currentBlock] > size) & ~(memory[nextAddress] = -1)) {
            let previousBlock = currentBlock;
            let currentBlock = memory[nextAddress];
            let nextAddress = memory[nextAddress + 1];
        }

        if (~(nextAddress = -1)) {
            // 조건문에서 memory[currentBlock] 이 아니라 currentBlock 사용해야 된다는 걸 알아야 풀 수 있는 문제.
            if (currentBlock < (size + 3)) {
                let memory[previousBlock + 1] = memory[currentBlock + 1];
                let memory[currentBlock] = size;
                let allocAddress = currentBlock + 1;
            } else {
                let memory[currentBlock] = memory[currentBlock] - (size + 1);
                let allocAddress = currentBlock + memory[currentBlock];
                let memory[allocAddress - 1] = size;
            }
        }

        return allocAddress;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array freeBlock, lastFreeBlock;
        if (freeList > o) {
            return;
        }
        let freeBlock = freeList;
        while (~(freeBlock[1] = -1)) {
            let freeBlock = freeBlock[1];
        }
        let memory[o - 1] = memory[o - 1] + 1;
        let memory[o] = -1;
        let freeBlock[1] = o - 1;
        return;
    }
}
