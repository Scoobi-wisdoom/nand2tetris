// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int size, maxSize;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let size = 0;
        if (maxLength = 0) {
            let maxSize = 1;
        } else {
            let maxSize = maxLength;
        }
        let chars = Array.new(maxSize);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (size < maxSize) {
            let chars[size] = c;
            let size = size + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size > 1) {
            let size = size - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, digit, result;
        var boolean isNegative;
        
        if ((size > 0) & (charAt(i) = 45)) {
            let isNegative = true;
            let i = i + 1;
        } else {
            let isNegative = false;
            let i = 0;
        }
        
        let result = 0;
        while (i < size) {
            if ((charAt(i) > 47) & (charAt(i) < 58)) {
                let digit = charAt(i) - 48;
                let result = result * 10 + digit;
            }
            let i = i + 1;
        }
        if (isNegative) {
            let result = -result;
        }
        return result;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int localVal;
        let size = 0;
        if (val < 0) {
            let localVal = -val;
            do appendChar(45);
        } else {
            let localVal = val;
        }

        do int2String(localVal);
        return;
    }

    method void int2String(int localVal) {
        var int oneDigitBefore;
        if (localVal < 10) {
            do appendChar((localVal + 48));
        } else {
            let oneDigitBefore = localVal - (localVal / 10 * 10);
            do int2String(localVal / 10);
            do appendChar(oneDigitBefore + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
