// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
    var int i;
    let twoToThe = Array.new(16);
    let i = 0;
    let twoToThe[0] = 1;
        while (i < 15) {
            let twoToThe[i + 1] = twoToThe[i] + twoToThe[i];
            let i = i + 1;
        }
    return;
    }

    function boolean bit(int x, int i) {
        return (x & twoToThe[i]) = 1;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, result, shiftedX, absX, absY;
        let result = 0;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let shiftedX = absX;
        let i = 0;
        while (i < 16) {
            if (Math.bit(absY, i)) {
                let result = result + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result, absX, absY, q;
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        let result = 0;

        if (absY > absX) {
            return 0;
        }

        let q = Math.divide(absX, 2 * absY);
        if (q < 0) {
            let q = -q;
        }
        if((absX - (2 * absY * q)) < absY) {
            let result = 2 * q;
        } else {
            let result = 2 * q + 1;
        }

        if ((x < 0 & y > 0) | (x > 0 & y < 0)) {
            let result = -result;
        }

        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, approx, approx_squared;
        let y = 0;
        // 16 bits / 2 - 1
        let i = 7;
        while( ~(i < 0) ) {
            let approx = y + twoToThe[i];
            let approx_squared = approx * approx;
            if( ~(approx_squared > x) & (approx_squared > 0) ) {
                let y = approx;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}
